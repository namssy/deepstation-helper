# DeepStation Helper - Cursor Rules

## 프로젝트 개요
- **프로젝트명**: DeepStation Helper
- **기술 스택**: React 18 + Vite + Tailwind CSS + React Router
- **패키지 매니저**: Yarn (반드시 yarn 사용)
- **배포**: GitHub Pages (base: '/deepstation-helper/')

## 프로젝트 구조
```
src/
├── components/          # 재사용 가능한 컴포넌트
├── pages/              # 페이지 컴포넌트
│   ├── HomePage.jsx    # 메인 페이지 (일주일 일정 조회)
│   └── LoginPage.jsx   # 로그인 페이지
├── utils/              # 유틸리티 함수
│   └── auth.js         # 인증 관련 함수
├── App.jsx             # 메인 앱 컴포넌트
├── main.jsx            # 앱 진입점
└── index.css           # 전역 스타일
```

## 코딩 규칙

### 1. 패키지 관리
- **반드시 yarn 사용**: npm 대신 yarn을 사용해야 함
- 새 패키지 설치: `yarn add [package]`
- 개발 의존성: `yarn add -D [package]`

### 2. React 컴포넌트
- 함수형 컴포넌트 사용
- JSX 파일 확장자 사용 (.jsx)
- 컴포넌트명은 PascalCase
- 파일명은 컴포넌트명과 동일하게

### 3. 스타일링
- **Tailwind CSS 사용**: 커스텀 CSS 대신 Tailwind 클래스 사용
- 반응형 디자인 필수: `sm:`, `md:`, `lg:` 브레이크포인트 활용
- 모바일 우선 접근법: 기본값은 모바일, 큰 화면용 클래스는 접두사 사용

### 4. 상태 관리
- React Hooks 사용 (useState, useEffect)
- 로컬 상태는 컴포넌트 내에서 관리
- 전역 상태가 필요한 경우 Context API 고려

### 5. 라우팅
- React Router v6 사용
- HashRouter 사용 (GitHub Pages 호환성)
- 경로는 `/` (홈), `/login` (로그인)

### 6. API 통신
- Axios 사용
- API 엔드포인트:
  - 로그인: `https://u9q3vta531.execute-api.ap-northeast-2.amazonaws.com/default/deepstation-login`
  - 일정 조회: `https://u9q3vta531.execute-api.ap-northeast-2.amazonaws.com/default/dayinfo`

### 7. 인증 관리
- localStorage 사용 (키: 'deepstation_auth')
- 세션 만료 시간 관리 (1시간)
- 인증 상태 확인 함수 제공 (utils/auth.js)

### 8. 에러 처리
- try-catch 블록으로 API 에러 처리
- 사용자에게 친화적인 에러 메시지 표시
- 로딩 상태 관리

### 9. 반응형 디자인 가이드라인
- 모바일 우선: 기본 스타일은 모바일용
- 태블릿 이상: `sm:` 접두사 사용
- 데스크톱: `lg:` 접두사 사용
- 패딩/마진: 모바일에서는 최소화, 큰 화면에서 증가

### 10. 파일 구조 규칙
- 컴포넌트는 `src/components/`에 배치
- 페이지는 `src/pages/`에 배치
- 유틸리티는 `src/utils/`에 배치
- 각 파일은 단일 책임 원칙 준수

### 11. 네이밍 컨벤션
- 컴포넌트: PascalCase (예: HomePage, LoginPage)
- 함수: camelCase (예: fetchWeekData, handleLogout)
- 변수: camelCase (예: authData, isLoading)
- 상수: UPPER_SNAKE_CASE (예: API_ENDPOINT)

### 12. Git 커밋 규칙
- 커밋 메시지 형식: `type(scope): message`
- 타입: feat, fix, docs, style, refactor, test, chore
- 스코프: 페이지명 또는 기능명 (예: auth, homepage)
- 예시: `feat(auth): add login functionality`

### 13. 개발 환경
- 개발 서버: `yarn dev` (포트 3000)
- 빌드: `yarn build`
- 미리보기: `yarn preview`

### 14. 특별 고려사항
- GitHub Pages 배포를 위한 HashRouter 사용
- 모바일 사용자 경험 최적화
- API 응답 데이터 구조에 맞춘 데이터 처리
- 세션 관리 및 자동 로그아웃 기능

## 코드 예시

### 반응형 클래스 사용법
```jsx
// 모바일 우선, 태블릿 이상에서 스타일 변경
<div className="p-0 border-0 sm:p-8 sm:border-4 sm:border-dashed sm:border-gray-200 sm:rounded-lg">
```

### API 호출 패턴
```jsx
const fetchData = async () => {
  try {
    const response = await axios.post(API_ENDPOINT, data, {
      headers: { 'Content-Type': 'application/json' }
    });
    // 성공 처리
  } catch (error) {
    // 에러 처리
  }
};
```

### 인증 상태 확인
```jsx
import { getValidAuthData, logout } from '../utils/auth';

const authData = getValidAuthData();
if (!authData) {
  navigate('/login');
}
```
